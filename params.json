{"name":"Cs496howto","tagline":"How To Create Choropleth Maps in Mapbox using jQuery","body":"Maps provide an important and useful way to display and describe all kinds of location-specific data. As someone interested in developing for news and journalism, I decided to write a how-to on building interactive data-driven maps for the web and mobile using some of the tools I've found. This website walks through the basics of building such a map- getting the data we need and then using it to build a map in jQuery.\r\n\r\nAfter researching some of the mapping tools that exist, I decided to use MapBox for this tutorial. Why?\r\n* **It's cross-platform**\r\nMapbox works on all major desktop and mobile web browsers and can be embedded in Android and iOS.\r\n* **It provides robust tools**\r\nThe Mapbox APIs, mobile SDKs and map design tools make it easy to develop a custom map.\r\n* **It's built on open source**\r\nMapbox is built on an open-source mapmaking library, Leaflet.js. Mapbox builds on Leaflet by hosting customizable Mapbox tiles. The Mapbox SDKs and API are all open source, making them easier to understand and modify as necessary.\r\n\r\nMost importantly, creating a static map using Mapbox is dead simple- in fact, you can add a basic map to any page by including an iframe, like so:\r\n\r\n```<iframe width='100%' height='500px' frameBorder='0' src='https://api.tiles.mapbox.com/v4/mapbox.streets.html?access_token=<public access token goes here>'</iframe>```\r\n\r\n\r\n\r\n\r\nIn this guide I'll walk through building a simple map that uses jquery and Mapbox.js to display median ages for different counties in a particular state. The older the residents of a particular county, the darker that county will be shaded. Some of the code in this how to is based on files found at https://www.mapbox.com/mapbox.js/example/v1.0.0/\r\n\r\nPrerequisites:\r\n-A web host for the required files\r\n-An account with Mapbox\r\n\r\nBefore we begin building the map, we need to retrieve the data we wish to display. For this example I'll be using data from the US Census website, censusreporter.gov. I've included the required files at the bottom of this page, but understanding how to navigate the Census Website is good to know. The census website includes quite a bit of interesting data and some very well made maps; we'll see how we can make similar maps shortly.\r\n\r\nBy searching the Census Reporter Explorer for the keyword 'Age', I'm able to find and view Table B01002: Median Age by Sex.\r\n![Finding census data](http://web.engr.oregonstate.edu/~christlu/map-howto-files/howto1.png)\r\nI then tell the website that I want a county-level summary view...\r\n![County-level summary](http://web.engr.oregonstate.edu/~christlu/map-howto-files/howto2.png)\r\nAnd limit my view to Florida.\r\n![Limit data to Florida](http://web.engr.oregonstate.edu/~christlu/map-howto-files/howto3.png)\r\nFrom here I can download the data in several formats. We'll need to get both the geoJSON and CSV formats for our map.\r\n![Viewing and downloading the data](http://web.engr.oregonstate.edu/~christlu/map-howto-files/howto4.png) \r\n\r\nWe can also view the census map that correlates to this table. Our initial map will behave similarly to this census map; we'll use the geoJSON file from the census to draw an overlay for each county and then colorize it based on the median ages provided in the CSV file. Before we can do so we need to convert the CSV file into a JSON file that can be handled by jQuery. Fortunately there is a simple free tool for making this conversion; we just need to visit shancarter.github.io/mr-data-converter/ and copy the contents of the CSV into the input box:\r\n\r\nAnd then copy the contents of the output box into a text editor and save it as a json file- here, I've named it censusdata.json, and I've renamed the geojson file to fl.geojson.\r\n\r\nNow we can begin developing our map. We'll start with a basic HTML page:\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n            <meta charset=utf-8 />\r\n            <title>Median Ages in Florida Counties</title>\r\n            <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\r\n            <script src='https://api.tiles.mapbox.com/mapbox.js/v2.1.5/mapbox.js'></script>\r\n            <link href='https://api.tiles.mapbox.com/mapbox.js/v2.1.5/mapbox.css' rel='stylesheet' />\r\n            <style>\r\n                body { margin:0; padding:0; }\r\n                #map { position:absolute; top:0; bottom:0; width:100%; }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div id='map'></div>\r\n            <script>\r\n                L.mapbox.accessToken = 'pk.eyJ1IjoibGNocmlzdGFraXMiLCJhIjoiNG5JSEdXdyJ9.4MZ2AheCwUXtAdk6GHPTsQ';\r\n                var map = L.mapbox.map('map', 'examples.map-h67hf2ic')\r\n                .setView([28,-84],7);\r\n                map.attributionControl.addAttribution('Data from ' +\r\n                '<a href=\"http://censusreporter.org/data/map/?table=B01002&geo_ids=050|04000US12\">' +\r\n                'Census Reporter</a>. Map based on' + \r\n                '<a href=\"https://www.mapbox.com/mapbox.js/example/v1.0.0/' + \r\n                'choropleth-joined-data-multiple-variables/\">Mapbox Example</a>');\r\n            </script>\r\n        </body>\r\n    </html>\r\n\r\nSome notes about this page:\r\n* We use a <meta> tag to prevent the user from changing the size of the page (mapbox will handle zooming in and out for us.) \r\n* We also include the mapbox.js script and css in the header, as well as jQuery, which we'll need later on. \r\n* There's also some basic styling which ensures that the map will fill the whole page:\r\n    `body { margin:0; padding:0; }`\r\n    `#map { position:absolute; top:0; bottom:0; width:100%; }`\r\n\r\n* In the body we add an empty <div> with the id 'map', followed by some javascript which will load the map into the div:\r\n    L.mapbox.accessToken = 'your public key';\r\n    var map = L.mapbox.map('map','examples.map-h67hf2ic')\r\n    .setView([40,-96],4);\r\nIn the first line, we create a mapbox object L.mapbox, and set its access token. In the second, we tell the object to create and configure a map, which will be stored in the variable named 'map'. Let's take a closer look at the function in the second line, `L.mapbox.map('element','id')`\r\n*'element' is the name of the DOM object id we want to place the map in. In our example we want to put the map in the <div> identified as 'map'.\r\n*'id' is the project id of the mapbox map we wish to use. In our example we use one of the example maps provided by Mapbox, but you can just as easily create a custom map on https://www.mapbox.com/projects/ and use that\r\n\r\nWe then append a call `.setView()` on the object. Our call to `setView()` centers the map on the coordinates `28,-84` and sets the zoom level to `7`. Finally, we add some attribution details, acknowledging where our map and data have come from.\r\n\r\nIf we save this file to our web server and open it, we now have a very nice (if very plain) map, focused on Florida. It's time to start adding our data. First, upload `fl.geojson` and `flcensusdata.json` to the same directory as the html file. Next, we'll begin modifying the script within the body our html file.\r\n\r\nFirst, we'll add add a new feature layer to the map, to outline every county in the data set. This is accomplished by creating a new mapbox featureLayer object (L.mapox.featureLayer()), loading our geojson data into it (loadURL('FL.geojson')) and adding it to our existing map (.addTo(map)). When finished, our script looks like this:\r\n\r\n    L.mapbox.accessToken = 'pk.eyJ1IjoibGNocmlzdGFraXMiLCJhIjoiNG5JSEdXdyJ9.4MZ2AheCwUXtAdk6GHPTsQ';\r\n    var map = L.mapbox.map('map', 'examples.map-h67hf2ic')\r\n    .setView([28,-84],7);\r\n    map.attributionControl.addAttribution('Data from ' +\r\n    '<a href=\"http://censusreporter.org/data/map/?table=B01002&geo_ids=050|04000US12\">' +\r\n    'Census Reporter</a>. Map based on <a href=\"https://www.mapbox.com/mapbox.js/example/v1.0.0/' + \r\n    'choropleth-joined-data-multiple-variables/\">Mapbox Example</a>');\r\n\r\n    var flLayer = L.mapbox.featureLayer()\r\n        .loadURL('FL.geojson')\r\n        .addTo(map);\r\n\r\nIf we save this and look at our map now, every county is outlined. But they're all gray! We need to load the actual data in order to colorize the map. First, we'll tell the script to run another function once flLayer is ready. We do this by adding a call to `loadData()` right after `.addTo()`, like so:\r\n\r\n    var flLayer = L.mapbox.featureLayer()\r\n        .loadURL('FL.geojson')\r\n        .addTo(map)\r\n        .on('ready',loadData);\r\n\r\nThen, we'll define the `loadData` function. This function loads the census data stored in `flcensusdata.json`. Once the data is done loading it calls `joinData` function to add this data to `flLayer`.\r\n\r\n    function loadData() {\r\n        $.getJSON('flcensusdata.json')\r\n            .done(function(data) {\r\n                joinData(data, flLayer);\r\n            });\r\n    }\r\n\r\nIn `joinData`, we pair each geoJSON county with the JSON data for that county's median age for the total population:\r\n\r\n    var ranges = {};\r\n    ranges['B01002001 - Total:'] = {min:Infinity,max:-Infinity};\r\n\r\n    function joinData(data, layer) {\r\n        var flGeoJSON = flLayer.toGeoJSON(),\r\n            byCounty = {};\r\n        // Rearrange it so that instead of being a big array,\r\n        // it's an object that is indexed by the state name,\r\n        // that we'll use to join on.\r\n        for (var i = 0; i < flGeoJSON.features.length; i++) {\r\n            byCounty[flGeoJSON.features[i].properties.name] =\r\n                flGeoJSON.features[i];\r\n        }\r\n        for (i = 0; i < data.length; i++) {\r\n            // Match the GeoJSON data (byCounty) with the tabular data\r\n            // (data), replacing the GeoJSON feature properties\r\n            // with the full data.\r\n            byCounty[data[i].name].properties = data[i];\r\n\t    //build the table of min and max values for B01002001 - Total:\r\n            ranges['B01002001 - Total:'].min = Math.min(data[i]['B01002001 - Total:'], ranges['B01002001 - Total:'].min);\r\n            ranges['B01002001 - Total:'].max = Math.max(data[i]['B01002001 - Total:'], ranges['B01002001 - Total:'].max);\r\n        }\r\n        // Create a new GeoJSON array of features and set it\r\n        // as the new flLayer content.\r\n        var newFeatures = [];\r\n        for (i in byCounty) {\r\n            newFeatures.push(byCounty[i]);\r\n        }\r\n        flLayer.setGeoJSON(newFeatures);\r\n        // Kick off by filtering on an attribute.\r\n        setVariable(variables[0]);\r\n    }\r\n\r\nBefore we call the function, we must set up a global variable `ranges` and set the starting values for our range (note that the min starts at impossibly high, and the max starts at impossibly low.) Upon calling the function we begin by joining our geoJSON data and an empty `byCounty` object. We then store each geoJSON location in the byCounty object according to its name.  At this point, byCounty contains a series of names and features. Next, we find each county name in data, and replace the feature information with the corresponding properties from the JSON data. We also keep track of the max and min values found in data; these will be used when colorizing the map.\r\nFinally, we use byCounty to create a new layer based on the JSON data. We can now call setVariable to colorize the data:\r\n\r\n    var hues = ['#eff3ff','#bdd7e7','#6baed6','#3182bd','#08519c'];\r\n\r\n    function setVariable(name) {\r\n        var scale = ranges[name];\r\n        flLayer.eachLayer(function(layer) {\r\n            // Decide the color for each state by finding its\r\n            // place between min & max, and choosing a particular\r\n            // color as index.\r\n            var division = Math.floor(\r\n                (hues.length - 1) *\r\n                ((layer.feature.properties[name] - scale.min) /\r\n                (scale.max - scale.min)));\r\n            // See full path options at\r\n            // http://leafletjs.com/reference.html#path\r\n            layer.setStyle({\r\n                fillColor: hues[division],\r\n                fillOpacity: 0.8,\r\n                weight: 0.5\r\n            });\r\n        });\r\n    }\r\n\r\n\r\nWe start by setting a global series of hues that will be used when colorizing the map. We then use the min and max range for the desired values ('B01002001 - Total:' in our case) to set a specific color for each county (represented in the map as a `feature` according to the numeric value associated with it.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}